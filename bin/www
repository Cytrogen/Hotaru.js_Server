#!/usr/bin/env node

const http = require("http");

const { Server } = require("socket.io");
const cors = require("cors");
const debug = require("debug")("server:server");
const bcrypt = require("bcrypt");

const app = require("../app");
const { generateJWT } = require("./utils/jwt");
const MonthToNumber = require("./utils/common");
const User = require("./utils/data/user");

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

// Enable CORS.
app.use(cors());

// Create HTTP server.
const server = http.createServer(app);

// Create SocketIO server.
const socketIO = new Server(server, {
    cors: {
        origin: ["http://localhost", "http://localhost:3000"]
    }
});

// Listen on SocketIO server.
socketIO.on("connection", (socket) => {
    // console.log(`Client connected [id=${socket.id}]`);

    // socket.on() --> listen to the event from the client
    // socket.emit() --> send the event to the client

    socket.on("register", async userData => {
        const existingUserEmail = await User.findOne({
            emailAddress: userData.emailAddress
        });
        const existingUsername = await User.findOne({
            username: userData.username
        });

        // If the user already exists, send a message to the client.
        if (existingUserEmail || existingUsername) {
            console.log(`[U0102] User already exists: ${userData.username}`);
            User.find({}).then((docs) => {
                console.log(docs); // print all users
            }).catch((err) => {
                console.error(err);
            });

            socket.emit("newRegisteredUser", {
                status: "U0102",
                message: "User already exists."
            });
            return;
        }

        // Add the new user to the database.
        await User.create({
            emailAddress: userData.emailAddress,
            username: userData.username,
            password: userData.password,
            DOBYear: userData.birthYear,
            DOBMonth: MonthToNumber[userData.birthMonth],
            DOBDay: userData.birthDay
        })
        console.log(`[00000] User registered: ${userData.username}`);

        // Send a message to the client that the user has been registered.
        socketIO.emit("newRegisteredUser", {
            status: "00000",
            token: generateJWT(userData.username)
        });
    });

    socket.on("login", async userData => {
        // Find the user from the database.
        const existingUser = await User.findOne({
            username: userData.username
        }).select("password");
        if (!existingUser) {
            console.log(`[U0201] User does not exist: ${userData.username}`);
            socket.emit("loggedInUser", {
                status: "U0201",
                message: "User does not exist."
            });
            return;
        }

        bcrypt.compare(userData.password, existingUser.get("password"), (err, confirmPassword) => {
            if (err) {
                console.error(err);
                return;
            }
            if (!confirmPassword) {
                console.log(`[U0202] Password is incorrect: ${userData.password}`);
                socket.emit("loggedInUser", {
                    status: "U0202",
                    message: "Password is incorrect."
                });
                return;
            }

            console.log(`[00000] User logged in: ${userData.username}`);
            socket.emit("loggedInUser", {
                status: "00000",
                token: generateJWT(userData.username)
            });
        });
    });

    socket.on("privateMessageSent", userData => {
        console.log(`[00000] Private message sent: ${userData.text}`);
        // socket.emit()
    });

    socket.on("disconnect", () => {
        console.log(`Client disconnected [id=${socket.id}]`);
    });
});

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param val
 * @returns {number|*|boolean}
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param error
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}
