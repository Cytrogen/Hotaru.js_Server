#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const cors = require('cors');
const { Server } = require('socket.io');
const { generateJWT } = require('./utils/jwt');

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

// Enable CORS.
app.use(cors());

// Create HTTP server.
const server = http.createServer(app);

// Create SocketIO server.
const socketIO = new Server(server, {
    cors: {
        origin: "http://localhost:3000"
    }
});

// A temporary database for users.
let users = [];

// Listen on SocketIO server.
socketIO.on("connection", (socket) => {
    console.log(`Client connected [id=${socket.id}]`);

    // socket.on() --> listen to the event from the client
    // socket.emit() --> send the event to the client

    socket.on('register', (data) => {
        // Add the new user to the temporary database.
        users.push(data);

        socketIO.emit('newRegisteredUser', {
            status: 200,
            token: generateJWT(data.username)
        });
    });

    socket.on('login', (data) => {
        const { username, password } = data;

        // Find the user from the temporary database.
        const user = users.find(user => user.username === username && user.password === password);
        socket.emit('loggedInUser', {
            status: user ? 200 : 400,
            token: user ? generateJWT(user.username) : null
        });
    });

    socket.on("disconnect", () => {
        console.log(`Client disconnected [id=${socket.id}]`);
    });
});

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param val
 * @returns {number|*|boolean}
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param error
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
